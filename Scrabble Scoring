/* Directions: (Part 1)Write a static method called scoreWord that takes a string as input. This method should take a string of 
 * upper-case letters including the blank ("_") character. If the given string is a valid word (present in the online dictionary)
 * it should return its scrabble score (see Wikipedia for tile scores for Scrabble in English). If the string is not a valid word,
 * it should return 0. Note that the blank character can represent any letter. You may assume that the string will have at most 
 * one blank character. For example, the method call scoreWord("QUICK") should return a score of 20, but scoreWord("ZXRT") should
 * return a score of 0 since it's not a valid word.
 * (Part 2) Write another static method, also called scoreWord, that takes two strings as input. The first string indicates 
 * the proposed word for scoring (as before). The second string indicates the squares for placing the word. These squares may 
 * have multipliers for a letter or the whole word. The string representing the squares uses the following codes:
 * Char Key: 'd' double letter score / 't'	triple letter score / 'D'	double word score / 'T'	triple word score
 * For any other regular square, don't apply a bonus
 * Ex: the method call scoreWord("QUICK", "d____T") should return a score of 90
*/

package assn1;

import stdlib.In;
import stdlib.Stopwatch;

public class Score{
   private static String[] dictionary;

   public static boolean underScore(String word, int index){
      String temp = word.toLowerCase();
      word = temp;
      String[] alphabet = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
      boolean valid = false;

      int i = 0;
      while (i < alphabet.length & valid == false){
         valid = isValid(word.substring(0, index) + alphabet[i] + word.substring(index + 1, word.length()));
         i++;
      }
      return valid;
   }

   public static boolean isValid(String searchKey){      
      In fstream = new In("http://www-01.sil.org/linguistics/wordlists/english/wordlist/wordsEn.txt");
      dictionary = fstream.readAllStrings();

      int count = 0;
      int lo = 0;
      int hi =  dictionary.length-1;

      while (lo <= hi){
         int mid = (lo + hi) / 2;
         if (searchKey.compareTo(dictionary[mid]) < 0){
            hi = mid -1;
         }
         else if (searchKey.compareTo(dictionary[mid]) > 0){
            lo = mid + 1;
         }
         else{
            return true;
         }
      }
      return false;
   }

   public static int findCharScore(char ch){
      int score = 0;
      switch (ch){
      case '_':
         break;
      case 'q':
      case 'z':
         score = 10;
         break;
      case 'j':
      case 'x':
         score = 8;
         break;
      case 'k':
         score = 5;
         break;
      case 'f':
      case 'h':
      case 'v':
      case 'w':
      case 'y':
         score = 4;
         break;
      case 'b':
      case 'c':
      case 'm':
      case 'p':
         score = 3;
         break;
      case 'd':
      case 'g':
         score = 2;
         break;
      default:
         score = 1;
         break;
      }
      return score;
   }

   public static int scoreWord(String searchKey){
      String temp = searchKey.toLowerCase();
      searchKey = temp;
      boolean underscore = false;
      boolean real = false;
      int score = 0;
      int index = 0;

      for (int i = 0; i < searchKey.length() & underscore == false; i++){
         if (searchKey.charAt(i) == '_'){
            underscore = true;
            index = i;
         }
      }

      if (underscore){
         real = underScore(searchKey, index);
      }
      else{
         real = isValid(searchKey);
      }

      if (!real){
         return 0;
      }

      for (int j = 0; j < searchKey.length(); j++){
         int tempScore = findCharScore(searchKey.charAt(j));
         score += tempScore;
      }
      return score;
   }

   public static int scoreWord(String searchKey, String second){
      String one = searchKey.toLowerCase();
      String two = second.toLowerCase();


      String temp = searchKey.toLowerCase();
      searchKey = temp;
      boolean underscore = false;
      boolean real = false;
      int score = 0;

      int i = 0;
      while (i < searchKey.length() & underscore == false){
         if (searchKey.charAt(i) == '_'){
            underscore = true;
         }
         i++;
      }

      if (underscore){
         real = underScore(searchKey, i);
      }
      else{
         real = isValid(searchKey);
      }

      if (!real){
         return 0;
      }


      int letterScore = 0;
      int wordScore = 0;
      int tripleWordScore = 0;
      int doubleWordScore = 0;

      for (int j = 0; j < one.length(); j++){
         char ch1 = one.charAt(j);
         char ch2 = two.charAt(j);
         int scoreOfChar = findCharScore(ch1);

         switch (ch2){
         case 'd':
            wordScore += scoreOfChar * 2;
            break;
         case 't':
            wordScore += scoreOfChar * 3;
            break;
         case 'T':
            wordScore += scoreOfChar;
            tripleWordScore += 1;
            break;
         case 'D':
            wordScore += scoreOfChar;
            doubleWordScore += 1;
            break;
         default:
            wordScore += scoreOfChar;
            break;
         }

         if (j == one.length() -1){
            for (int k = 0; k < tripleWordScore; k++){
               wordScore *= 3;
            }

            for (int l = 0; l < doubleWordScore; l++){
               wordScore *= 2;
            }
         }			
      }
      return wordScore;
   }

   public static void main (String[] args){
      Stopwatch timer = new Stopwatch();
      System.out.println("Score: " + scoreWord("cat"));    
      System.out.println("Time elapsed: " + timer.elapsedTime());
   }

}
