/* Directions: Create a class called PokerHand that consists of Card objects. It should provide the following instance methods:
 * add -- this method takes a Card object as an argument and adds it to the hand.
 * size -- this method takes no arguments and returns the number of cards in the hand.
 * isFlush -- this method returns true if the hand is a flush (all cards have the same suit), false otherwise. The method takes
 * no arguments.
 * isStraight -- this method returns true if the cards can be arranged so that their ranks are all in sequence (Ace can be low 
 * or high), false otherwise. The method takes no arguments.
 * isFullHouse -- this method returns true if the hand has 2 cards of one rank and 3 cards of another rank, false otherwise. 
 * The method takes no arguments.
 * The class should generally work for hands of five cards, the code should also work for hands of other sizes with minimal
 * modification. In other words, it should make use of loops with index variables instead of hard-coded references to each card in the hand.

package assn2;

import week2.Card;

public class PokerHand{

   private Card[] hand;
   private int numCards;

   private final static char[] RANKS = { '2', '3', '4', '5', '6', '7', '8', '9',
      'T', 'J', 'Q', 'K', 'A' };
   private final static char[] SUITS = { 'C', 'S', 'D', 'H' };

   public PokerHand(){
      hand = new Card[5];  //creates a basic array size 5 to hold handful of cards
      numCards = 0;       // numCards tracks of the number of cards in a hand
   }

   public void add(Card c){
      //takes a Card object as an argument and adds a Card argument to the hand
      if (numCards == hand.length) {
         // if a larger capacity is required, creates a new array for the deck
         resize(hand.length * 2);
      }
      // if hand is empty, assigns first card
      if (numCards == 0){ 
         hand[0] = c;
         numCards++;
      }
      // adds card to back of the array
      else {
         hand[numCards] = c;
         numCards++;			
      }
   }

   public int size(){
      return numCards;
   }

   public boolean isFlush(){
      // This method accepts no arguments and returns true if hand is flush. Otherwise, false.
      char suit = hand[0].getSuit();
      for (int i = 0; i < numCards; i++){
         if (suit != hand[i].getSuit()){
            return false;
         }
      }
      return true;		  
   }

   public boolean isStraight(){
      // this method accepts no arguments and returns true if each card in the hand can be arranged 
      // in sequence (Ace can be low or high). Otherwise, returns false. 

      sort();
      int numAces = 1; 
      int i = numCards-1;

      while (i > 0 & hand[i].getRankValue() == 14){
         // sums the number of aces in the hand
         numAces += 1;
         i--;
      }

      if ((numAces >= 2) & !(hand[0].getRankValue() == 2) | (hand[numCards-numAces].getRankValue() == 13)){
         // Tests for an Ace in the hand & either a 2 or King. If there's an Ace but no 2 or King Card, then it's false
         return false;
      }

      for (int j = numCards-numAces; j > 0; j--){   
         // this for-loop tests a sorted hand for whether its a straight. It skips over and doesn't test Ace Cards
         if ((hand[j].getRankValue() - hand[j-1].getRankValue()) > 1){
            return false;
         }
      } 
      return true;
   }

   public void sort() {
      // basic sort taken from card.java - used to sort hand by rank
      for (int i = 0; i < numCards - 1; i++) {
         int lowRankPos = i;
         for (int j = i; j < numCards; j++) {
            if (hand[lowRankPos].getRankValue() > hand[j].getRankValue()) {
               lowRankPos = j;
            }
         }
         Card temp = hand[i];
         hand[i] = hand[lowRankPos];
         hand[lowRankPos] = temp;
      }
   }

   public boolean isFullHouse(){
      //this method returns true if the hand has 2 cards of one rank and 3 cards of another rank, false otherwise. 
      // The method takes no arguments. This method works for an hand of any size.

      if (numCards < 5) // eliminates hands with too few cards
         return false;

      int[] countList = {0,0,0,0,0,0,0,0,0,0,0,0,0} ; // holds the count for each rank (ascending order) starting with 2-A
      int index = 0;
      int rank = 0;

      for (int i = 0; i < numCards; i++){
         rank = hand[i].getRankValue();
         switch (rank){
         case 2:
            countList[0]++;
            break;
         case 3:
            countList[1]++;
            break;
         case 4:
            countList[2]++;
            break;
         case 5:
            countList[3]++;
            break;
         case 6:
            countList[4]++;
            break;
         case 7:
            countList[5]++;
            break;
         case 8:
            countList[6]++;
            break;
         case 9:
            countList[7]++;
            break;
         case 10:
            countList[8]++;
            break;
         case 11:
            countList[9]++;
            break;
         case 12:
            countList[10]++;
            break;
         case 13:
            countList[11]++;
            break;
         case 14:
            countList[12]++;
            break;
         default:
            System.out.println("Error. Something went wrong.");
            break;
         }
      }

      boolean test1 = false;
      boolean test2 = false;

      for (int j = 0; j < countList.length; j++){
         if (countList[j] >= 3)
            test1 = true;
         else if (countList[j] >= 2)
            test2 = true;
      }
      return (test1 && test2);
   }

   private void resize(int newSize){
      Card[] newDeck = new Card[newSize];

      for (int i = 0; i < newSize && i < numCards; i++){
         newDeck[i] = hand[i];
      }
      hand = newDeck;
   }

   public static void main(String[] args) {
      // use for testing code    
      PokerHand myhand = new PokerHand();
      Card one = new Card('2','H');
      Card two = new Card('2','H');
      Card three = new Card('4','H');
      Card four = new Card('3','H');
      Card five = new Card('3','H');
      Card six = new Card('3','H');

      myhand.add(one);
      myhand.add(two);
      myhand.add(three);
      myhand.add(four);
      myhand.add(five);
      myhand.add(six);	

      System.out.println("Number of cards in your hand: " + myhand.size());
      System.out.println("Is a flush: " + myhand.isFlush());
      System.out.println("Is a straight: " + myhand.isStraight());
      System.out.println("Is a full house: " + myhand.isFullHouse());

   }

}
