/* Directions: Create a class called Anagram. In the class, define a static method called getAnagrams that accepts a string
 * (without spaces or punctuation) and returns an array of strings. The array should consist of valid anagrams and no duplicates
 */

package assn2;

import stdlib.In;
import week2.BagOWords;

public class Anagram {
/* The function getAnagrams in the Anagram class accepts a string (must be a single word with no punctuation)
 * The method uses recursion and a collection class (BagOWords) to return a duplicate free array of strings of matching anagrams
 */
 
   private static BagOWords wordlist = new BagOWords();
	 private static String[] dictionary;
	 private static String searchKey;
	  
   public static String[] getAnagrams(String letters){
   // getAnagrams accepts a string called letters that cannot include punctuation and returns a array of Strings 
   // consisting of valid anagrams for letters. The array returned will not contain dublicates
     importdictionary();
     searchKey = letters;
     getAnagrams(letters, "");
     return wordlist.getWords();
  }
  
  private static void getAnagrams(String letters, String start){
  // getAnagrams is a recursive method. It generates permutations for the original string and calls findword which checks 
  // the dictionary to determine if the permutation is a valid word. It then adds valid words to a collection class
     if (letters.length() == 0) {
        if ((!searchKey.equals(start)) && findword(start) == true){
           wordlist.addWord(start);
        }
     } 
    for (int i = 0; i < letters.length(); i++){
      getAnagrams(letters.substring(0, i) + letters.substring(i + 1, letters.length()),start + letters.charAt(i));
    }
  }

  public static void importdictionary(){
	  	In fstream = new In("http://www-01.sil.org/linguistics/wordlists/english/wordlist/wordsEn.txt");
	    dictionary = fstream.readAllStrings();
  }
  
  public static boolean findword(String permutation){
     int lo = 0;
     int hi = dictionary.length-1;
     int mid;
     
     while (lo <= hi){
        mid = (lo + hi)/ 2;
        if (permutation.compareTo(dictionary[mid]) < 0){
           hi = mid -1;
        }
        else if(permutation.compareTo(dictionary[mid]) > 0){
           lo = mid + 1;
        }
        else if(permutation.equals(dictionary[mid])){
           return true;
        }
     }
     return false; 
  }
  
  public static void main(String[] args){
  // the main method can be used to test getAnagrams
    String[] results = getAnagrams("reductions");
    int length = results.length;
    int i = 0;
	  while (i < length){
	     System.out.println(results[i]);
	     i++;
	  }
  }

}
